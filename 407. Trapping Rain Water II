class Solution{
    public int trapRainWater(int[][] heightMap){
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[2]-b[2]);
        int m=heightMap.length;
        int n=heightMap[0].length;
        int dir[][]={{-1,0},{1,0},{0,1},{0,-1}};
        boolean visited[][]=new boolean[m][n];
        int ans=0;
        for(int i=0;i<n;i++){
            pq.add(new int[]{0,i,heightMap[0][i]});
            pq.add(new int[]{m-1,i,heightMap[m-1][i]});
            visited[0][i]=true;
            visited[m-1][i]=true;
        }
        for(int i=1;i<m-1;i++){
            pq.add(new int[]{i,0,heightMap[i][0]});
            pq.add(new int[]{i,n-1,heightMap[i][n-1]});
            visited[i][0]=true;
            visited[i][n-1]=true;
        }
        while(!pq.isEmpty()){
            int arr[]=pq.poll();
            int x=arr[0],y=arr[1],val=arr[2];
            for(int d[]:dir){
                int nx=x+d[0];
                int ny=y+d[1];
                if(nx<0 || ny<0 || nx>=m || ny>=n || visited[nx][ny]) continue;
                visited[nx][ny]=true;
                ans+=Math.max(0,val-heightMap[nx][ny]);
                pq.offer(new int[]{nx,ny,Math.max(val,heightMap[nx][ny])});
            }
        }
        return ans;
    }
}
