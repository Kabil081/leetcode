class Solution {
    public boolean isSafe(int row,int col,char[][]board,char num){
        for(int i=0;i<9;i++){
            if(i!=row && board[i][col]==num){
                return false;
            }
            if(i!=col && board[row][i]==num){
                return false;
            }
        }
        int startRow=(row/3)* 3;
        int startCol=(col/3)*3;
        for(int i=startRow;i<startRow+3;i++){
            for(int j=startCol;j<startCol+3;j++){
                if(i!=row && j!=col && board[i][j]==num){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean isValidSudoku(char[][] board) {
        // for(int i=0;i<9;i++){
        //     for(int j=0;j<9;j++){
        //         if(board[i][j]>='1' && board[i][j]<='9'){
        //             if(!isSafe(i,j,board,board[i][j])){
        //                 System.out.println(i+":"+j);
        //                 return false;
        //             }
        //         }   
        //     }
        // }
        // return true;
        boolean row[][]=new boolean[9][9];
        boolean col[][]=new boolean[9][9];
        boolean box[][]=new boolean[9][9];
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(board[i][j]=='.'){
                    continue;
                }
                int num=board[i][j]-'1';
                int boxIndex=(i/3)*3+(j/3);
                if(row[i][num] || col[j][num] || box[boxIndex][num]){
                    return false;
                }
                row[i][num]=true;
                col[j][num]=true;
                box[boxIndex][num]=true;
            }
        }
        return true;
    }
}
