
class Solution{
    Map<Integer,Integer> map=new HashMap<>();
    public int[] findFrequentTreeSum(TreeNode root){
        dfs(root);
        int maxFreq=Integer.MIN_VALUE;
        int ind=0,count=0;
        for(int freq:map.values()){
            if(freq>maxFreq){
                maxFreq=freq;
                count=1;
            }else if(freq==maxFreq){
                count++;
            }
        }
        int res[]=new int[count];
        for(Map.Entry<Integer,Integer> entry:map.entrySet()){
            if(entry.getValue()==maxFreq){
                res[ind++]=entry.getKey();
            }
        }
        return res;
    }
    public int dfs(TreeNode root){
        if(root==null) return 0;
        int left=dfs(root.left);
        int right=dfs(root.right);
        int sum=left+right+root.val;
        map.put(sum,map.getOrDefault(sum,0)+1);
        return sum;
    }
}
