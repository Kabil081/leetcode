class Solution{
    public int minimumObstacles(int[][] grid){
        int n=grid.length;
        int m=grid[0].length;
        int temp[][]=new int[n][m];
        for(int i=0;i<n;i++){
            Arrays.fill(temp[i],Integer.MAX_VALUE);
        }
        Deque<int[]>pq=new ArrayDeque<>();
        int dis[][]={{0,1},{1,0},{-1,0},{0,-1}};
        pq.addLast(new int[]{0,0,0});
        while(!pq.isEmpty()){
            int cur[]=pq.removeFirst();
            int x=cur[0],y=cur[1],d=cur[2];
            if(temp[x][y]<d) continue;
            for(int dir[]:dis){
                int nx=x+dir[0];
                int ny=y+dir[1];
                if(nx<0 || ny<0 || nx>=n || ny>=m || temp[nx][ny]<=d+grid[nx][ny]) continue;
                temp[nx][ny]=d+grid[nx][ny];
                if(grid[nx][ny]==1){
                    pq.addLast(new int[]{nx,ny,d+grid[nx][ny]});
                }else{
                    pq.addFirst(new int[]{nx,ny,d+grid[nx][ny]});
                }
            }
        }
        return temp[n-1][m-1];
    }
}
