class Solution {
    public int openLock(String[] deadends, String target) {
        Set<String>deadset=new HashSet<>(Arrays.asList(deadends));
        if(deadset.contains("0000")) return -1;
        Queue<String> queue=new LinkedList<>();
        Set<String>visited=new HashSet<>();
        queue.offer("0000");
        visited.add("0000");
        int moves=0;
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                String cur=queue.poll();
                if(cur.equals(target)) return moves;
                for(String states:getNext(cur)){
                    if(!visited.contains(states) && !deadset.contains(states)){
                        queue.add(states);
                        visited.add(states);
                    }
                }
            }
            moves++;
        }
        return -1;
    }
    public List<String> getNext(String str){
        List<String> res=new ArrayList<>();
        char ch[]=str.toCharArray();
        for(int i=0;i<4;i++){
            char original=ch[i];
            ch[i]= original=='9' ? '0':(char)(original+1);
            res.add(new String(ch));
            ch[i]= original=='0' ? '9':(char)(original-1);
            res.add(new String(ch));
            ch[i]=original;
        }
        return res;
    }
}
