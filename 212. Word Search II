public class Trienode{
    Trienode arr[]=new Trienode[26];
    String word=null;
}
class Solution{
    List<String> res=new ArrayList<>();
    public List<String> findWords(char[][] board, String[] words){
        Trienode root=new Trienode();
        for(String str:words) insert(root,str);
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                dfs(board,i,j,root);
            }
        }
        return res;
    }
    public void insert(Trienode node,String words){
        for(char ch:words.toCharArray()){
            int index=ch-'a';
            if(node.arr[index]==null) node.arr[index]=new Trienode();
            node=node.arr[index];
        }
        node.word=words;
    }
    public void dfs(char board[][],int i,int j,Trienode node){
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || board[i][j]=='#') return;
        char c=board[i][j];
        int index=c-'a';
        if(node.arr[index]==null) return;
        node=node.arr[index];
        if(node.word!=null){
            res.add(node.word);
            node.word=null;
        }
        board[i][j]='#';
        dfs(board,i,j+1,node);
        dfs(board,i,j-1,node);
        dfs(board,i+1,j,node);
        dfs(board,i-1,j,node);
        board[i][j]=c;
    }
}
