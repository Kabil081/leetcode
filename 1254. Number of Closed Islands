class Solution {
    int m,n;
    public int closedIsland(int[][] grid) {
        m=grid.length;
        n=grid[0].length;
        boolean visited[][]=new boolean[m][n];
        int count=0;
        for(int i=0;i<m;i++){
            if(!visited[i][0] && grid[i][0]==0) dfs(grid,visited,i,0);
            if(!visited[i][n-1] && grid[i][n-1]==0) dfs(grid,visited,i,n-1);
        }
        for(int i=0;i<n;i++){
            if(!visited[0][i] && grid[0][i]==0) dfs(grid,visited,0,i);
            if(!visited[m-1][i] && grid[m-1][i]==0) dfs(grid,visited,m-1,i);
        }
        for(int i=1;i<m-1;i++){
            for(int j=1;j<n-1;j++){
                if(grid[i][j]==0 && !visited[i][j]){
                    dfs(grid,visited,i,j);
                    count++;
                }
            }
        }
        return count;
    }
    public void dfs(int grid[][],boolean visited[][],int i,int j){
        visited[i][j]=true;
        if(i-1>0 && !visited[i-1][j] && grid[i-1][j]==0) dfs(grid,visited,i-1,j);
        if(j-1>0 && !visited[i][j-1] && grid[i][j-1]==0) dfs(grid,visited,i,j-1);
        if(i+1<m && !visited[i+1][j] && grid[i+1][j]==0) dfs(grid,visited,i+1,j);
        if(j+1<n && !visited[i][j+1] && grid[i][j+1]==0) dfs(grid,visited,i,j+1);
    }
}
