class Solution {
    int n;
    int map[]=new int[16000];
    public int largestIsland(int[][] grid){
        int cnt=2;
        n=grid.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    dfs(grid,i,j,cnt);
                    if(map[cnt]==n*n) return n*n;
                    cnt++;
                }
            }
        }
        int max=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                    Set<Integer>set=new HashSet<>();
                    int size=1;
                    if(i-1>=0 && grid[i-1][j]!=0){
                        size+=map[grid[i-1][j]];
                        set.add(grid[i-1][j]);
                    }
                    if(j-1>=0 && !set.contains(grid[i][j-1]) && grid[i][j-1]!=0){
                        size+=map[grid[i][j-1]];
                        set.add(grid[i][j-1]);
                    }
                    if(i+1<n && !set.contains(grid[i+1][j]) && grid[i+1][j]!=0){
                        size+=map[grid[i+1][j]];
                        set.add(grid[i+1][j]);
                    } 
                    if(j+1<n && !set.contains(grid[i][j+1]) && grid[i][j+1]!=0){
                        size+=map[grid[i][j+1]];
                        set.add(grid[i][j+1]);
                    }
                    max=Math.max(size,max);
                }
            }
        }
        return max;
    }
    public void dfs(int [][]grid,int i,int j,int num){
        grid[i][j]=num;
        map[num]++;
        if(i-1>=0 && grid[i-1][j]==1) dfs(grid,i-1,j,num);
        if(j-1>=0 && grid[i][j-1]==1) dfs(grid,i,j-1,num);
        if(i+1<n && grid[i+1][j]==1) dfs(grid,i+1,j,num);
        if(j+1<n && grid[i][j+1]==1) dfs(grid,i,j+1,num);
        return;
    }
}
