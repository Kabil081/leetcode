import java.util.* ;
import java.io.*; 
public class Solution{
	public static ArrayList<Integer>dijkstra(ArrayList<ArrayList<Integer>> vec, int vertices, int edges, int source){
		List<List<int[]>>graph=new ArrayList<>();
		for(int i=0;i<vertices;i++){
			graph.add(i,new ArrayList<>());
		}
		for(List<Integer>list:vec){
			int v1=list.get(0);
			int v2=list.get(1);
			int w=list.get(2);
			graph.get(v1).add(new int[]{v2,w});
			graph.get(v2).add(new int[]{v1,w});
		}
		PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->a[0]-b[0]);
		int dist[]=new int[vertices];
		Arrays.fill(dist,Integer.MAX_VALUE);
		pq.add(new int[]{0,0});
		dist[0]=0;
		while(!pq.isEmpty()){
			int cur[]=pq.poll();
			for(int[]neighbor:graph.get(cur[0])){
				if(neighbor[1]+cur[1]<dist[neighbor[0]]){
					dist[neighbor[0]]=neighbor[1]+cur[1];
					pq.add(new int[]{neighbor[0],neighbor[1]+cur[1]});
				}
			}
		}
		ArrayList<Integer>res=new ArrayList<>();
		for(int i:dist) res.add(i);
		return res;
	}
}
