class Solution {
    public int[][]directions={{-1,0},{0,-1},{0,1},{1,0}};
    public int m,n;
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        m=heights.length;
        n=heights[0].length;
        boolean [][]pacific=new boolean[m][n];
        boolean [][]atlantic=new boolean[m][n];
        for(int i=0;i<m;i++) dfs(pacific,i,0,heights);
        for(int i=0;i<n;i++) dfs(pacific,0,i,heights);
        for(int i=0;i<m;i++) dfs(atlantic,i,n-1,heights);
        for(int i=0;i<n;i++) dfs(atlantic,m-1,i,heights);
        List<List<Integer>>res=new ArrayList<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(pacific[i][j] && atlantic[i][j]){
                    res.add(Arrays.asList(i,j));
                }
            }
        }
        return res;
    }
    public void dfs(boolean arr[][],int r,int c,int [][]heights){
        if(arr[r][c]) return;
        arr[r][c]=true;
        for(int dir[]:directions){
            int row=r+dir[0];
            int col=c+dir[1];
            if(row>=0 && row<m && col>=0 && col<n && heights[row][col]>=heights[r][c]){
                dfs(arr,row,col,heights);
            }
        }
    }
}
