class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n=graph.length;
        int outdegree[]=new int[n];
        List<Integer>[] edges=new ArrayList[n];
        Deque<Integer> queue=new ArrayDeque<>();
        for(int i=0;i<n;i++){
            edges[i]=new ArrayList<>();
        }
        for(int i=0;i<n;i++){
            outdegree[i]=graph[i].length;
            for(int j=0;j<graph[i].length;j++){
                edges[graph[i][j]].add(i);
            }
            if(outdegree[i]==0) queue.addLast(i);
        }
        List<Integer> result=new ArrayList<>();
        while(!queue.isEmpty()){
            int cur=queue.pollFirst();
            result.add(cur);
            if(edges[cur]!=null){
                for(int i:edges[cur]){
                    outdegree[i]--;
                    if(outdegree[i]==0) queue.addLast(i);
                }
            }
        }
        Collections.sort(result);
        return result;
    }
}
