class Solution {
    int dp[][];
    int dir[][]={{-1,0},{0,-1},{1,0},{0,1}};
    int mod=1000000007;
    public int countPaths(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        dp=new int[m][n];
        int paths=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(dp[i][j]==0) paths=(paths+dfs(grid,i,j,-1)) % mod;
                else paths=(paths+dp[i][j]) % mod;
            }
        }
        return paths;
    }
    public int dfs(int[][]grid,int i,int j,int parent){
        if(grid[i][j]<=parent) return 0;
        if(dp[i][j]!=0) return dp[i][j];
        int paths=1;
        for(int d[]:dir){
            int r=d[0]+i,c=d[1]+j;
            if(r<0 || r>=grid.length || c<0 || c>=grid[0].length) continue;
            paths=(paths+dfs(grid,r,c,grid[i][j])) % mod;
        }
        return dp[i][j]=paths;
    }
}
