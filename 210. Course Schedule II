class Solution {
    public int[] findOrder(int n, int[][] graph) {
        List<Integer> result=new ArrayList<>();
        List<Integer>[]edges=new ArrayList[n];
        Deque<Integer> queue=new ArrayDeque<>();
        for(int i=0;i<n;i++){
            edges[i]=new ArrayList<>();
        }
        int indegree[]=new int[n];
        for(int edge[]:graph){
            edges[edge[0]].add(edge[1]);
            indegree[edge[1]]++;
        }
        for(int i=0;i<n;i++){
            if(indegree[i]==0) queue.addLast(i);
        }
        while(!queue.isEmpty()){
            int cur=queue.pollFirst();
            result.add(cur);
            if(edges[cur]!=null){
                for(int i:edges[cur]){
                    indegree[i]--;
                    if(indegree[i]==0) queue.addLast(i);
                }
            }
        }
        if(result.size()!=n) return new int[]{};
        Collections.reverse(result);
        int res[]=new int[n];
        for(int i=0;i<n;i++){
            if(result.get(i)!=null) res[i]=result.get(i);
        }
        return res;
    }
}
