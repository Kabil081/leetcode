void merge(int arr[],int l,int m,int r){
    int n1=m-l+1,n2=r-m;
    int left[n1],right[n2];
    for(int i=0;i<n1;i++){
        left[i]=arr[i+l];
    }
    for(int i=0;i<n2;i++){
        right[i]=arr[i+m+1];
    }
    int i=0,j=0,k=l;
    while(i<n1 && j<n2){
        if(left[i]<right[j]){
            arr[k++]=left[i++];
        }
        else{
            arr[k++]=right[j++];
        }
    }
    while(i<n1){
        arr[k++]=left[i++];
    }
    while(j<n2){
        arr[k++]=right[j++];
    }
}
void mergesort(int arr[],int l,int r){
    if(l<r){
        int m=l+(r-l)/2;
        mergesort(arr,l,m);
        mergesort(arr,m+1,r);
        merge(arr,l,m,r);
    }
}
int rangeSum(int* nums, int numsSize, int n, int left, int right) {
    int *arr=(int*)malloc(((n*(n+1))/2)*sizeof(int)),j=0;
    unsigned long int sum=0,mod = 1000000007;
    for(int i=0;i<numsSize;i++){
        arr[j++]=nums[i];
        for(int k=i+1;k<numsSize;k++){
            arr[j]=nums[k]+arr[j-1];
            j++;
        }
    }
    mergesort(arr,0,j-1);
    while(left<=right){
        sum=sum+arr[left-1];
        left++;
    }
    sum=sum%mod;
    return sum;
}
