/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int postIndex;
    public void in(int inorder[]){
        postIndex=inorder.length-1;
    }
    public TreeNode insert(int postorder[],int start,int end,Map<Integer,Integer>map){
        if(start>end) return null;
        TreeNode root=new TreeNode(postorder[postIndex]);
        postIndex--;
        int rootIndex=map.get(root.val);
        root.right=insert(postorder,rootIndex+1,end,map);
        root.left=insert(postorder,start,rootIndex-1,map);
        return root;
    }
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        TreeNode root=new TreeNode();
        Map<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        in(inorder);
        root=insert(postorder,0,postorder.length-1,map);
        return root;
    }
}
