class Solution{
    public int networkDelayTime(int[][] times, int n, int k){
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[1]-b[1]);
        List<List<int[]>> graph=new ArrayList<>();
        for(int i=0;i<=n;i++){
            graph.add(new ArrayList<>());
        }
        for(int arr[]:times){
            graph.get(arr[0]).add(new int[]{arr[1],arr[2]});
        }
        int dist[]=new int[n+1];
        Arrays.fill(dist,Integer.MAX_VALUE);
        pq.add(new int[]{k,0});
        dist[k]=0;
        while(!pq.isEmpty()){
            int arr[]=pq.poll();
            for(int edge[]:graph.get(arr[0])){
                if(dist[edge[0]]<=edge[1]+arr[1]) continue;
                pq.add(new int[]{edge[0],edge[1]+arr[1]});
                dist[edge[0]]=edge[1]+arr[1];
            }
        }
        int max=-1;
        for(int i=1;i<=n;i++){
            if(dist[i]==Integer.MAX_VALUE){
                return -1;
            }
            max=Math.max(max,dist[i]);
        }
        return max;
    }
}
