class Solution {
    public int minTimeToReach(int[][] moveTime){
        int n=moveTime.length;
        int m=moveTime[0].length;
        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->a[0]-b[0]);
        boolean visited[][]=new boolean[n][m];
        pq.add(new int[]{0,0,0,0});
        int dir[][]={{-1,0},{0,-1},{0,1},{1,0}};
        while(!pq.isEmpty()){
            int cur[]=pq.poll();
            int x=cur[1];
            int y=cur[2];
            int val=cur[0];
            int ind=cur[3];
            if(x==n-1 && y==m-1) return val;
            for(int d[]:dir){
                int nx=d[0]+x;
                int ny=d[1]+y;
                if(nx<0 || ny<0 || nx>=n || ny>=m || visited[nx][ny]) continue;
                if(ind==0){
                    int min=Math.max(moveTime[nx][ny]+1,val+1);
                    pq.add(new int[]{min,nx,ny,1});
                }else{
                    int min=Math.max(moveTime[nx][ny]+2,val+2);
                    pq.add(new int[]{min,nx,ny,0});
                }
                visited[nx][ny]=true;
            }
        }
        return 0;
    }
}
