class Solution {
    public List<List<Integer>> permuteUnique(int[] nums){
        List<List<Integer>> list=new ArrayList<>();
        Arrays.sort(nums);
        boolean used[]=new boolean[nums.length];
        backtrack(new ArrayList<>(),list,nums,used);
        return list;
    }
    public void backtrack(List<Integer>cur,List<List<Integer>> list,int []nums,boolean used[]){
        if(cur.size()==nums.length){
            list.add(new ArrayList<>(cur));
            return;
        }
        for(int i=0;i<nums.length;i++){
            if(used[i]) continue;
            if(i>0 && nums[i]==nums[i-1] && !used[i-1]) continue;
            cur.add(nums[i]);
            used[i]=true;
            backtrack(cur,list,nums,used);
            used[i]=false;
            cur.remove(cur.size()-1);
        }
    }
}
