/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public class Pair{
        int index;
        TreeNode node;
        Pair(TreeNode node,int index){
            this.index=index;
            this.node=node;
        }
        public int getIndex(){
            return index;
        }
        public TreeNode getnode(){
            return node;
        }
    }
    public int widthOfBinaryTree(TreeNode root) {
        Queue<Pair> queue=new LinkedList<>();
        if(root==null) return 0;
        int max=0;
        queue.offer(new Pair(root,0));
        while(!queue.isEmpty()){
            int l=queue.size();
            int i1=queue.peek().getIndex();
            int i2=i1;
            for(int i=0;i<l;i++){
                Pair pair=queue.poll();
                int index=pair.getIndex();
                TreeNode node=pair.node;
                i2=index;
                if(node.left!=null){
                    queue.offer(new Pair(node.left,2*index));
                }
                if(node.right!=null){
                    queue.offer(new Pair(node.right,2*index+1));
                }
            }
            max=Math.max(max,i2-i1+1);
        }
        return max;
    }
}
