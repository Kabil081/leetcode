class Solution{
    public int findMaxPathScore(int[][] edges, boolean[] online, long k) {
        List<List<int[]>> graph=new ArrayList<>();
        for(int i=0;i<online.length;i++){
            graph.add(new ArrayList<>());
        }
        int left=1;
        int right=1000000000;
        for(int edge[]:edges){
            graph.get(edge[0]).add(new int[]{edge[1],edge[2]});
        }
        return bsearch(left,right,graph,online,k);
    }
    public boolean helper(int minedge,List<List<int[]>> graph,boolean online[],long k){
        int n=online.length;
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[2]-b[2]);
        pq.add(new int[]{0,0,Integer.MAX_VALUE});
        while(!pq.isEmpty()){
            int arr[]=pq.poll();
            int node=arr[0];
            int cost=arr[1];
            int min=arr[2];
            if(node==n-1) return true;
            for (int[] edge : graph.get(node)) {
                int next = edge[0];
                int edgeCost = edge[1];
                int newCost = cost + edgeCost;
                int newMin = Math.min(min, edgeCost);
                if ((next != n - 1 && !online[next]) || newCost > k || edgeCost < minedge){
                    continue;
                }
                pq.add(new int[]{next, newCost, newMin});
            }

        }
        return false;
    }
    public int bsearch(int left,int right,List<List<int[]>> graph,boolean online[],long k){
        int res=-1;
        while(left<=right){
            int mid=(left+right)/2;
            if(helper(mid,graph,online,k)){
                res=mid;
                left=mid+1;
            }else{
                right=mid-1;
            }
        }
        return res;
    }
}
