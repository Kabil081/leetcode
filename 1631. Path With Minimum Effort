class Solution{
    public int minimumEffortPath(int[][] heights){
        PriorityQueue<int[]>pq=new PriorityQueue<>((a,b)->a[2]-b[2]);
        pq.add(new int[]{0,0,0});
        int m=heights.length,n=heights[0].length;
        int dir[][]={{-1,0},{0,-1},{0,1},{1,0}};
        int distance[][]=new int[m][n];
        for(int []row:distance) Arrays.fill(row,Integer.MAX_VALUE);
        while(!pq.isEmpty()){
            int cur[]=pq.poll();
            int x=cur[0],y=cur[1],diff=cur[2];
            if(x==m-1 && y==n-1){
                return diff;
            }
            for(int d[]:dir){
                int x1=x+d[0];
                int y1=y+d[1];
                if(x1<0 || x1>=m || y1<0 || y1>=n) continue;
                int curdiff=Math.abs(heights[x1][y1]-heights[x][y]);
                int maxdiff=Math.max(diff,curdiff);
                if(maxdiff<distance[x1][y1]){
                    distance[x1][y1]=maxdiff;
                    pq.add(new int[]{x1,y1,distance[x1][y1]});
                }
            }
        }
        return 0;
    }
}
