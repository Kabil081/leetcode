class Solution{
    int segment[];
    public int numOfUnplacedFruits(int[] fruits, int[] baskets) {
        int n=fruits.length;
        segment=new int[n*4];
        build(0,0,n-1,baskets);
        int count=0;
        for(int i=0;i<n;i++){
            if(bsearch(0,0,n-1,fruits[i],baskets)==-1){
                count++;
            }
        }
        return count;
    }
    public void build(int node,int start,int end,int []baskets){
        if(start==end){
            segment[node]=baskets[start];
            return;
        }
        int mid=start+(end-start)/2;
        build(2*node+1,start,mid,baskets);
        build(2*node+2,mid+1,end,baskets);
        segment[node]=Math.max(segment[2*node+1],segment[2*node+2]);
    }
    public int bsearch(int ind,int start,int end,int fruit,int[] baskets){
        if(segment[ind]<fruit){
            return -1;
        }
        if(start==end){
            segment[ind]=-1;
            return 1;
        }
        int mid=start+(end-start)/2;
        int val=bsearch(2*ind+1,start,mid,fruit,baskets);
        if(val==-1) val=bsearch(2*ind+2,mid+1,end,fruit,baskets);
        segment[ind]=Math.max(segment[2*ind+1],segment[2*ind+2]);
        return val;
    }
}
