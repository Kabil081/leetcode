class Trienode{
    Trienode arr[];
    String word;
    public Trienode(){
        arr=new Trienode[64];
        word=null;
    }
}
class Solution {
    public boolean exist(char[][] board, String word) {
        Trienode root=new Trienode();
        insert(word,root);
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(dfs(board,i,j,root)) return true;
            }
        }
        return false;
    }
    public void insert(String word,Trienode node){
        for(char ch:word.toCharArray()){
            int index=ch-'A';
            if(node.arr[index]==null) node.arr[index]=new Trienode();
            node=node.arr[index];
        }
        node.word=word;
    }
    public boolean dfs(char board[][],int i,int j,Trienode node){
        if(i<0 || i>=board.length || j<0 || j>=board[0].length || board[i][j]=='#') return false;
        char c=board[i][j];
        int index=c-'A';
        if(node.arr[index]==null) return false;
        node=node.arr[index];
        if(node.word!=null) return true;
        board[i][j]='#';
        boolean found=dfs(board,i,j+1,node) || 
        dfs(board,i,j-1,node) ||
        dfs(board,i-1,j,node) ||
        dfs(board,i+1,j,node);
        board[i][j]=c;
        return found;
    }
}
