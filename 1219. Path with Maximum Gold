class Solution {
    public int getMaximumGold(int[][] grid) {
        int max=0,n=grid.length,m=grid[0].length;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]!=0){
                    max=Math.max(max,dfs(grid,i,j));
                }
            }
        }
        return max;
    }
    public int dfs(int [][]grid,int i,int j){
        int count=grid[i][j];
        int max=0;
        int t=grid[i][j];
        grid[i][j]=0;
        if(i-1>=0 && grid[i-1][j]!=0) max=dfs(grid,i-1,j);
        if(j-1>=0 && grid[i][j-1]!=0) max=Math.max(dfs(grid,i,j-1),max);
        if(i+1<grid.length && grid[i+1][j]!=0) max=Math.max(dfs(grid,i+1,j),max);
        if(j+1<grid[0].length && grid[i][j+1]!=0) max=Math.max(dfs(grid,i,j+1),max);
        grid[i][j]=t;
        return count+max; 
    }
}
