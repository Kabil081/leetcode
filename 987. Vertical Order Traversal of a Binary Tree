/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> result=new ArrayList<>();
        if(root==null) return result;
        Map<Integer,List<Integer>> res=new TreeMap<>();
        Queue<TreeNode> queue=new LinkedList<>();
        Queue<Integer> vertical=new LinkedList<>();
        queue.add(root);
        vertical.add(0);
        while(!queue.isEmpty()){
            int size=queue.size();
            Map<Integer,List<Integer>> map=new TreeMap<>();
            for(int i=0;i<size;i++){
                TreeNode node=queue.poll();
                Integer v=vertical.poll();
                map.putIfAbsent(v,new ArrayList<>());
                map.get(v).add(node.val);
                if(node.left!=null){
                    queue.offer(node.left);
                    vertical.add(v-1);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                    vertical.add(v+1);
                }
            }
            for(Map.Entry<Integer,List<Integer>> list:map.entrySet()) {
                int ver=list.getKey();
                List<Integer> nodes=list.getValue();
                Collections.sort(nodes);
                res.putIfAbsent(ver,new ArrayList<>());
                res.get(ver).addAll(nodes);
            }
        }
        for(List<Integer> list:res.values()){
            result.add(list);
        }
        return result;
    }
}
