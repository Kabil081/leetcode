class Solution{
    public boolean check(String s1,String s2,int num1,int num2){
        if(num1==num2) return true;
        if(s1.length()!=s2.length()) return true;
        int diff=0;
        for(int i=0;i<s1.length();i++){
            if(s1.charAt(i)!=s2.charAt(i)) diff++;
            if(diff>1) return true;
        }
        return false;
    }
    public List<String> getWordsInLongestSubsequence(String[] words, int[] groups) {
        int n=groups.length;
        int dp[]=new int[n];
        int lis[]=new int[n];
        int max=1,last=0;
        Arrays.fill(dp,1);
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(check(words[i],words[j],groups[i],groups[j])) continue;
                if(dp[j]<dp[i]+1){
                    lis[j]=i;
                    dp[j]=dp[i]+1;
                }
            }
            if(max<dp[i]){
                max=dp[i];
                last=i;
            }
        }
        List<String> res=new ArrayList<>();
        while(max>0){
            res.add(words[last]);
            max--;
            last=lis[last];
        }
        Collections.reverse(res);
        return res;
    }
}
