class Solution {
    int [][]dir={{-1,0},{1,0},{0,1},{0,-1}};
    int dp[][];
    public int longestIncreasingPath(int[][] matrix) {
        int max=0;
        dp=new int[matrix.length][matrix[0].length];
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(dp[i][j]==0) max=Math.max(max,dfs(matrix,i,j,-1));
            }
        }
        return max;
    }
    public int dfs(int [][]matrix,int i,int j,int parent){
        if(matrix[i][j]<=parent) return 0;
        if(dp[i][j]!=0) return dp[i][j];
        int max=0;
        for(int d[]:dir){
            int r=d[0]+i,c=d[1]+j;
            if(r<0 || r>=matrix.length || c<0 || c>=matrix[0].length) continue;
            max=Math.max(max,dfs(matrix,r,c,matrix[i][j]));
        }
        return dp[i][j]=max+1;
    }
}
