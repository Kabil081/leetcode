class Solution {
    int parent[];
    int rank[];
    public int countCompleteComponents(int n, int[][] edges) {
        parent=new int[n];
        rank=new int[n];
        for(int i=0;i<n;i++){
            parent[i]=i;
            rank[i]=1;
        }
        for(int edge[]:edges){
            union(edge[0],edge[1]);
        }
        int count=0;
        int []compSize=new int[n];
        long[] compEdge=new long[n];
        for(int i=0;i<n;i++){
            compSize[find(i)]++;
        }
        for(int edge[]:edges){
            compEdge[find(edge[0])]++;
        }
        for(int i=0;i<n;i++){
            if(find(i)==i){
                if(compEdge[i]==(long)compSize[i]*(compSize[i]-1)/2){
                    count++;
                }
            }
        }
        return count;
    }
    public int find(int x){
        if(parent[x]!=x){
            parent[x]=find(parent[x]);
        }
        return parent[x];
    }
    public void union(int x,int y){
        int rootX=find(x);
        int rootY=find(y);
        if(rootX==rootY) return;
        if(rootX>rootY){
            parent[rootY]=rootX;
        }else if(rootY>rootX){
            parent[rootX]=rootY;
        }else{
            parent[rootY]=rootX;
            rank[rootX]++;
        }
    }
}
