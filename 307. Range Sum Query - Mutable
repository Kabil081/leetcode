class NumArray{
    int tree[];
    int n;
    public NumArray(int[] nums) {
        n=nums.length;
        tree=new int[n*4];
        build(0,0,n-1,nums);
    }
    public void build(int node,int start,int end,int[]nums){
        if(start==end){ 
            tree[node]=nums[start];
        }else{
            int mid=(start+end)/2;
            build(2*node+1,start,mid,nums);
            build(2*node+2,mid+1,end,nums);
            tree[node]=tree[2*node+1]+tree[2*node+2];
        }
    }
    public void update(int index, int val){
        update(0,0,n-1,index,val);
    }
    public void update(int node,int start,int end,int ind,int val){
        if(start==end){
            tree[node]=val;
        }else{
            int mid=(start+end)/2;
            if(ind<=mid){
                update(2*node+1,start,mid,ind,val);
            }else{
                update(2*node+2,mid+1,end,ind,val);
            }
            tree[node]=tree[2*node+1]+tree[2*node+2];
        }
    }
    public int sumRange(int left, int right){
        return query(0,0,n-1,left,right);
    }
    public int query(int node,int start,int end,int left,int right){
        if(right<start || end<left) return 0;
        if(left<=start && end<=right) return tree[node];
        int mid=(start+end)/2;
        int leftSum=query(2*node+1,start,mid,left,right);
        int rightSum=query(2*node+2,mid+1,end,left,right);
        return leftSum+rightSum;
    }
}
