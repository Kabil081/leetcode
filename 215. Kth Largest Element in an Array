void swap(int*a,int*b){
    int temp=*a;
    *a=*b;
    *b=temp;
}
void heapify(int arr[],int n,int i){
    int smallest=i,left=(2*i)+1,right=(2*i)+2;
    if(left<n && arr[left] < arr[smallest]){
        smallest=left;
    }
    if(right<n && arr[right]<arr[smallest]){
        smallest=right;
    }
    if(smallest!=i){
        swap(&arr[i],&arr[smallest]);
        heapify(arr,n,smallest);
    }
}
void buildheap(int arr[],int n){
    for(int i=n/2-1;i>=0;i--){
        heapify(arr,n,i);
    }
}
int findKthLargest(int* nums, int numsSize, int k){
    int *heap=(int*)malloc(k*sizeof(int));
    for(int i=0;i<k;i++){
        heap[i]=nums[i];
    }
    buildheap(heap,k);
    for(int i=k;i<numsSize;i++){
        if(nums[i]>heap[0]){
            heap[0]=nums[i];
            heapify(heap,k,0);
        }
    }
    int r=heap[0];
    free(heap);
    return r;
}
