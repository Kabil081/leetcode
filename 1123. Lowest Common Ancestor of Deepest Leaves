/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution{
    public TreeNode lcaDeepestLeaves(TreeNode root){
        return findLca(root,0,getDepth(root));
    }
    public TreeNode findLca(TreeNode root,int Depth,int maxDepth){
        if(root==null) return root;
        if(Depth==maxDepth) return root;
        TreeNode left=findLca(root.left,Depth+1,maxDepth);
        TreeNode right=findLca(root.right,Depth+1,maxDepth);
        if(left!=null && right!=null) return root;
        return left!=null?left:right;
    }
    public int getDepth(TreeNode root){
        if(root==null) return -1;
        return Math.max(getDepth(root.left),getDepth(root.right))+1;
    }
}
