class Solution{
    public int[] maxPoints(int[][] grid, int[] queries){
        int m=grid.length,n=grid[0].length,queriesLen=queries.length,count=0;
        PriorityQueue<int[]> minHeap=new PriorityQueue<>((a,b)->Integer.compare(a[0],b[0]));
        int sortedQueries[][]=new int[queriesLen][2];
        for(int i=0;i<queriesLen;i++){
            sortedQueries[i][0]=queries[i];
            sortedQueries[i][1]=i;
        }
        boolean visited[][]=new boolean[m][n];
        Arrays.sort(sortedQueries,(a,b)->Integer.compare(a[0],b[0]));
        int res[]=new int[queriesLen];
        minHeap.add(new int[]{grid[0][0],0,0});
        visited[0][0]=true;
        int dir[]={0,1,0,-1,0};
        for(int arr[]:sortedQueries){
            int value=arr[0];
            while(!minHeap.isEmpty() && minHeap.peek()[0]<value){
                int cur[]=minHeap.poll();
                count++;
                int val=cur[0],row=cur[1],col=cur[2];
                for(int d=0;d<4;d++){
                    int x=row+dir[d];
                    int y=col+dir[d+1];
                    if(x>=m || y>=n || x<0 || y<0 || visited[x][y]) continue;
                    minHeap.add(new int[]{grid[x][y],x,y});
                    visited[x][y]=true;
                }
            }
            res[arr[1]]=count;
        }
        return res;
    }
}
