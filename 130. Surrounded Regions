class Solution {
    boolean visited[][];
    int m,n;
    public void solve(char[][] board) {
        m=board.length;
        n=board[0].length;
        visited=new boolean[m][n];
        for(int i=0;i<m;i++){
            if(board[i][0]=='O' && !visited[i][0]){
                dfs(board,i,0);
            }
            if(board[i][n-1]=='O' && !visited[i][n-1]){
                dfs(board,i,n-1);
            }
        }
        for(int i=0;i<n;i++){
            if(board[0][i]=='O' && !visited[0][i]){
                dfs(board,0,i);
            }
            if(board[m-1][i]=='O' && !visited[m-1][i]){
                dfs(board,m-1,i);
            }
        }
        for(int i=1;i<m-1;i++){
            for(int j=1;j<n-1;j++){
                if(board[i][j]=='O' && !visited[i][j]){
                    board[i][j]='X';
                }
            }
        }
    }
    public void dfs(char[][]board,int r,int c){
        visited[r][c]=true;
        if(r-1>=0 && !visited[r-1][c] && board[r-1][c]=='O') dfs(board,r-1,c);
        if(r+1<m && !visited[r+1][c] && board[r+1][c]=='O') dfs(board,r+1,c);
        if(c-1>=0 && !visited[r][c-1] && board[r][c-1]=='O') dfs(board,r,c-1);
        if(c+1<n && !visited[r][c+1] && board[r][c+1]=='O') dfs(board,r,c+1);
    }
}
