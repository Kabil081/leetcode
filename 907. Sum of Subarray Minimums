class Solution {
    public int sumSubarrayMins(int[] arr) {
        if (arr.length == 1) {
            return arr[0];
        }
        int mod = (int) 1e9 + 7;
        int n = arr.length;
        long total = 0;
        int[] previousSmaller = new int[n];
        int[] nextSmaller = new int[n];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            previousSmaller[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        stack.clear();
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
                stack.pop();
            }
            nextSmaller[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }
        for (int i = 0; i < n; i++) {
            int prev = previousSmaller[i] == -1 ? 0 : previousSmaller[i] + 1;
            int next = nextSmaller[i];
            total += (long) (i - prev + 1) * (next - i)  * arr[i] % mod;
            total %= mod;
        }
        return (int) total;
    }
}
