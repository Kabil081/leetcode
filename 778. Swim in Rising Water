class Solution{
    public int swimInWater(int[][] grid){
        int m=grid.length;
        int n=grid[0].length;
        int dir[][]={{-1,0},{0,-1},{0,1},{1,0}};
        boolean visited[][]=new boolean[m][n];
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[2]-b[2]);
        pq.add(new int[]{0,0,grid[0][0]});
        while(!pq.isEmpty()){
            int arr[]=pq.poll();
            if(arr[0]==m-1 && arr[1]==n-1) return arr[2];
            for(int d[]:dir){
                int x=d[0]+arr[0];
                int y=d[1]+arr[1];
                if(x<0 || y<0 || x>=m || y>=n || visited[x][y]) continue;
                visited[x][y]=true;
                pq.add(new int[]{x,y,Math.max(grid[x][y],arr[2])});
            }
        }
        return 0;
    }
}
