class Solution {
    public long subArrayRanges(int[] arr) {
        Stack<Integer> stack=new Stack<>();
        int n=arr.length;
        int next[]=new int[n];
        int previous[]=new int[n];
        int mod = (int) 1e9 + 7;
        for(int i=0;i<n;i++){
            while(!stack.isEmpty() && arr[stack.peek()]>=arr[i]){
                stack.pop();
            }
            previous[i]= stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        stack.clear();
        for(int i=n-1;i>=0;i--){
            while(!stack.isEmpty() && arr[stack.peek()]>arr[i]){
                stack.pop();
            }
            next[i]=stack.isEmpty()?n:stack.peek();
            stack.push(i);
        }
        stack.clear();
        long small=0;
        for(int i=0;i<n;i++){
            int prev=previous[i]==-1?0:previous[i]+1;
            int ne=next[i];
            small+=(long)(i-prev+1)*(ne-i)*arr[i];
        }
        for(int i=0;i<n;i++){
            while(!stack.isEmpty() && arr[stack.peek()]<=arr[i]){
                stack.pop();
            }
            previous[i]= stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        stack.clear();
        for(int i=n-1;i>=0;i--){
            while(!stack.isEmpty() && arr[stack.peek()]<arr[i]){
                stack.pop();
            }
            next[i]=stack.isEmpty()?n:stack.peek();
            stack.push(i);
        }
        stack.clear();
        long large=0;
        for(int i=0;i<n;i++){
            int prev=previous[i]==-1?0:previous[i]+1;
            int ne=next[i];
            large+=(long)(i-prev+1)*(ne-i)*arr[i];
        }
        return large-small;
    }
}
